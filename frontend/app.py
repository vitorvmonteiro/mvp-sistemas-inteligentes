import streamlit as st
import requests
import uuid

# CONFIGURA√á√ïES DA P√ÅGINA E URL DO BACKEND
BACKEND_URL = "http://127.0.0.1:8000/predict"

st.set_page_config(
    page_title="MVP - Sistemas Inteligentes",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# T√çTULO E DESCRI√á√ÉO
st.title("SISTEMA DE PREVIS√ÉO DE CHURN DE CLIENTES")
st.write(
    "Esta ferramenta utiliza um modelo de Machine Learning para prever se um cliente"
    " est√° propenso a cancelar seu servi√ßo (churn). Preencha os dados abaixo para obter a previs√£o."
)
st.markdown("---")

# INICIALIZA√á√ÉO DO HIST√ìRICO DE PREVIS√ïES
# st.session_state mant√©m o hist√≥rico entre as intera√ß√µes do usu√°rio.
if 'prediction_history' not in st.session_state:
    st.session_state['prediction_history'] = []

# FORMUL√ÅRIO DE ENTRADA DE DADOS
# st.form agrupa os widgets de entrada e s√≥ envia os dados quando o bot√£o √© pressionado.
with st.form("input_form"):
    st.header("Insira os dados do cliente:")

    # Nome do cliente
    client_name = st.text_input(
        "Nome do cliente",
        help="Insira o nome completo do cliente para identifica√ß√£o no hist√≥rico."
    )

    # Mapeamento de op√ß√µes para os valores num√©ricos que a API espera (0 ou 1)
    plan_options = {"N√£o": 0, "Sim": 1}
    selected_plan_label = st.selectbox(
        "O cliente possui plano internacional?",
        options=list(plan_options.keys()),
        help="Selecione 'Sim' se o cliente tiver um plano internacional ativo."
    )
    international_plan_value = plan_options[selected_plan_label]

    total_day_charge = st.number_input(
        "Custo total das chamadas diurnas ($)",
        min_value=0.0, step=0.01, format="%.2f",
        help="Valor total cobrado do cliente por chamadas realizadas durante o dia."
    )

    total_eve_charge = st.number_input(
        "Custo total das chamadas noturnas ($)",
        min_value=0.0, step=0.01, format="%.2f",
        help="Valor total cobrado do cliente por chamadas realizadas durante a noite."
    )

    customer_service_calls = st.number_input(
        "N¬∫ de chamadas para o atendimento ao cliente",
        min_value=0, step=1,
        help="Quantas vezes o cliente contatou o servi√ßo de atendimento ao cliente."
    )
    
    # Bot√£o para submeter o formul√°rio e fazer a predi√ß√£o
    submit_button = st.form_submit_button(label="Fazer Previs√£o", use_container_width=True)

# L√ìGICA DE PREDI√á√ÉO E EXIBI√á√ÉO DO RESULTADO
if submit_button:
    # Dicion√°rio com os dados para enviar √† API (nomes das chaves s√£o id√™nticos aos da API)
    feature_data = {
        "international_plan": international_plan_value,
        "total_day_charge": total_day_charge,
        "total_eve_charge": total_eve_charge,
        "customer_service_calls": customer_service_calls,
    }

    # Adiciona um spinner para melhorar a experi√™ncia do usu√°rio em casos de lentid√£o
    with st.spinner("Analisando dados e fazendo previs√£o..."):
        try:
            # Faz a requisi√ß√£o POST para o backend
            response = requests.post(BACKEND_URL, json=feature_data)
            # Levanta um erro HTTP para respostas mal-sucedidas (c√≥digo 4xx ou 5xx)
            response.raise_for_status() 

            # Extrai o resultado da resposta JSON
            prediction_result = response.json()
            churn_prediction = prediction_result.get("churn_prediction", "Erro na resposta")
            
            # Exibi√ß√£o do resultado
            st.markdown("---")
            st.subheader("Resultado da Previs√£o")
            if churn_prediction == "Sim":
                st.error(f"**Previs√£o de Churn: {churn_prediction}**", icon="üî¥")
                st.warning("‚ö†Ô∏è Cliente com alta probabilidade de cancelar o servi√ßo. Melhore a oferta!")
            else:
                st.success(f"**Previs√£o de Churn: {churn_prediction}**", icon="üü¢")
                st.info("Cliente com baixa probabilidade de cancelar o servi√ßo.")

            # Adiciona a previs√£o ao hist√≥rico para exibi√ß√£o
            history_entry = {
                # INSER√á√ÉO DE ID √öNICO PARA PERMITIR A EXCLUS√ÉO SEGURA
                "id": str(uuid.uuid4()),
                "Nome do Cliente": client_name if client_name else "N√£o informado",
                "Plano Internacional": selected_plan_label,
                "Custo Diurno ($)": total_day_charge,
                "Custo Noturno ($)": total_eve_charge,
                "Chamadas ao Suporte": customer_service_calls,
                "Previs√£o de Churn": churn_prediction
            }
            st.session_state.prediction_history.insert(0, history_entry)

        except requests.exceptions.RequestException as e:
            st.error(f"Erro ao conectar com a API. Verifique se o backend est√° rodando. Detalhes: {e}")

# DELETAR UMA ENTRADA DO HIST√ìRICO
def delete_entry(entry_id):
    """Fun√ß√£o para remover uma entrada do hist√≥rico com base em seu ID √∫nico."""
    st.session_state.prediction_history = [
        entry for entry in st.session_state.prediction_history if entry.get("id") != entry_id
    ]

# EXIBI√á√ÉO DO HIST√ìRICO DE PREVIS√ïES
if st.session_state.prediction_history:
    st.markdown("---")
    st.subheader("Hist√≥rico de Previs√µes Recentes")
    
    # Cabe√ßalho da tabela do hist√≥rico
    cols = st.columns((2, 2, 2, 2, 2, 2, 1))
    headers = ["Nome do cliente", "Plano Intl.", "Custo diurno ($)", "Custo noturno ($)", "Chamadas ao suporte", "Previs√£o", "Deletar?"]
    for col, header in zip(cols, headers):
        col.write(f"**{header}**")

    # Itera sobre o hist√≥rico para exibir cada entrada com um bot√£o de exclus√£o
    for entry in st.session_state.prediction_history:
        col1, col2, col3, col4, col5, col6, col7 = st.columns((2, 2, 2, 2, 2, 2, 1))
        with col1:
            st.write(entry["Nome do Cliente"])
        with col2:
            st.write(entry["Plano Internacional"])
        with col3:
            st.write(f"{entry['Custo Diurno ($)']:.2f}")
        with col4:
            st.write(f"{entry['Custo Noturno ($)']:.2f}")
        with col5:
            # CORRIGIDO: Garante que o n√∫mero seja exibido como texto simples, sem cor.
            st.write(str(entry["Chamadas ao Suporte"]))
        with col6:
            # ALTERADO: Usa st.markdown com cores para remover o fundo.
            if entry["Previs√£o de Churn"] == "Sim":
                st.markdown(":red[Sim]")
            else:
                st.markdown(":green[N√£o]")
        with col7:
            # Bot√£o para chamar a fun√ß√£o de exclus√£o
            st.button("‚ùå", key=f"del_{entry['id']}", on_click=delete_entry, args=(entry['id'],))
